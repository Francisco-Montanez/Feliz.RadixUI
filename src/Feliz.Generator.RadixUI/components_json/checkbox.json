{
    "Name": "Checkbox",
    "Description": "A control that allows the user to toggle between checked and not checked.",
    "ImportCommand": "@radix-ui/react-checkbox",
    "SubComponentData": [
        {
            "Name": "Root",
            "Description": "Contains all the parts of a checkbox. An input will also render when used within a form to ensure events propagate correctly.",
            "PropData": [
                {
                    "Name": "asChild",
                    "Required": false,
                    "Description": "Change the default rendered element for the one passed as a child, merging their props and behavior.  Read our Composition guide for more details.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "defaultChecked",
                    "Required": false,
                    "Description": "The checked state of the checkbox when it is initially rendered. Use when you do not need to control its checked state.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "checked",
                    "Required": false,
                    "Description": "The controlled checked state of the checkbox. Must be used in conjunction with onCheckedChange.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "onCheckedChange",
                    "Required": false,
                    "Description": "Event handler called when the checked state of the checkbox changes.",
                    "PropType": "function",
                    "PropTypeValue": "(checked: boolean | 'indeterminate') => void"
                },
                {
                    "Name": "disabled",
                    "Required": false,
                    "Description": "Event handler called when the checked state of the checkbox changes.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "required",
                    "Required": false,
                    "Description": "When true, indicates that the user must check the checkbox before the owning form can be submitted.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "name",
                    "Required": false,
                    "Description": "The name of the checkbox. Submitted with its owning form as part of a name/value pair.",
                    "PropType": "string",
                    "PropTypeValue": "string"
                },
                {
                    "Name": "value",
                    "Required": false,
                    "Description": "The value given as data when submitted with a name.",
                    "PropType": "string",
                    "PropTypeValue": "string"
                }
            ],
            "EnumData": []
        },
        {
            "Name": "Indicator",
            "Description": "Renders when the checkbox is in a checked or indeterminate state. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.",
            "PropData": [
                {
                    "Name": "asChild",
                    "Required": false,
                    "Description": "Change the default rendered element for the one passed as a child, merging their props and behavior.  Read our Composition guide for more details.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "forceMount",
                    "Required": false,
                    "Description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                }
            ],
            "EnumData": []
        }
    ]
}