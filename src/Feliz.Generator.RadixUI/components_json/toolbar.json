{
    "Name": "Toolbar",
    "Description": "A container for grouping a set of controls, such as buttons, toggle groups or dropdown menus.",
    "ImportCommand": "@radix-ui/react-toolbar",
    "SubComponentData": [
        {
            "Name": "Root",
            "Description": "Contains all the toolbar component parts.",
            "PropData": [
                {
                    "Name": "asChild",
                    "Required": false,
                    "Description": "Change the default rendered element for the one passed as a child, merging their props and behavior.  Read our Composition guide for more details.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "loop",
                    "Required": false,
                    "Description": "The reading direction of the toolbar. If omitted, inherits globally from DirectionProvider or assumes LTR (left-to-right) reading mode.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                }
            ],
            "EnumData": [
                {
                    "Name": "orientation",
                    "Required": false,
                    "Description": "The orientation of the toolbar.",
                    "PropType": "enum",
                    "PropTypeValue": "\"horizontal\" | \"vertical\" | undefined"
                },
                {
                    "Name": "dir",
                    "Required": false,
                    "Description": "The orientation of the toolbar.",
                    "PropType": "enum",
                    "PropTypeValue": "\"ltr\" | \"rtl\""
                }
            ]
        },
        {
            "Name": "Button",
            "Description": "A button item.",
            "PropData": [
                {
                    "Name": "asChild",
                    "Required": false,
                    "Description": "Change the default rendered element for the one passed as a child, merging their props and behavior.  Read our Composition guide for more details.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                }
            ],
            "EnumData": []
        },
        {
            "Name": "Link",
            "Description": "A link item.",
            "PropData": [
                {
                    "Name": "asChild",
                    "Required": false,
                    "Description": "Change the default rendered element for the one passed as a child, merging their props and behavior.  Read our Composition guide for more details.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                }
            ],
            "EnumData": []
        },
        {
            "Name": "ToggleGroup",
            "Description": "A set of two-state buttons that can be toggled on or off.",
            "PropData": [
                {
                    "Name": "asChild",
                    "Required": false,
                    "Description": "Change the default rendered element for the one passed as a child, merging their props and behavior.  Read our Composition guide for more details.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "value",
                    "Required": false,
                    "Description": "Determines whether a single or multiple items can be pressed at a time.",
                    "PropType": "string",
                    "PropTypeValue": "string"
                },
                {
                    "Name": "defaultValue",
                    "Required": false,
                    "Description": "The value of the item to show as pressed when initially rendered and type is \"single\". Use when you do not need to control the state of the items.",
                    "PropType": "string",
                    "PropTypeValue": "string"
                },
                {
                    "Name": "onValueChange",
                    "Required": false,
                    "Description": "Event handler called when the pressed state of an item changes and type is \"single\".",
                    "PropType": "function",
                    "PropTypeValue": "(value: string) => void"
                },
                {
                    "Name": "value",
                    "Required": false,
                    "Description": "Event handler called when the pressed state of an item changes and type is \"single\".",
                    "PropType": "string[]",
                    "PropTypeValue": "string[]"
                },
                {
                    "Name": "defaultValue",
                    "Required": false,
                    "Description": "The values of the items to show as pressed when initially rendered and type is \"multiple\". Use when you do not need to control the state of the items.",
                    "PropType": "string[]",
                    "PropTypeValue": "string[]"
                },
                {
                    "Name": "onValueChange",
                    "Required": false,
                    "Description": "Event handler called when the pressed state of an item changes and type is \"multiple\".",
                    "PropType": "function",
                    "PropTypeValue": "(value: string[]) => void"
                },
                {
                    "Name": "disabled",
                    "Required": false,
                    "Description": "Event handler called when the pressed state of an item changes and type is \"multiple\".",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                }
            ],
            "EnumData": [
                {
                    "Name": "type",
                    "Required": true,
                    "Description": "Determines whether a single or multiple items can be pressed at a time.",
                    "PropType": "enum",
                    "PropTypeValue": "\"single\" | \"multiple\""
                }
            ]
        },
        {
            "Name": "ToggleItem",
            "Description": "An item in the group.",
            "PropData": [
                {
                    "Name": "asChild",
                    "Required": false,
                    "Description": "Change the default rendered element for the one passed as a child, merging their props and behavior.  Read our Composition guide for more details.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "value",
                    "Required": true,
                    "Description": "A unique value for the item.",
                    "PropType": "string",
                    "PropTypeValue": "string"
                },
                {
                    "Name": "disabled",
                    "Required": false,
                    "Description": "When true, prevents the user from interacting with the item.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                }
            ],
            "EnumData": []
        },
        {
            "Name": "Separator",
            "Description": "Used to visually separate items in the toolbar.",
            "PropData": [
                {
                    "Name": "asChild",
                    "Required": false,
                    "Description": "Change the default rendered element for the one passed as a child, merging their props and behavior.  Read our Composition guide for more details.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                }
            ],
            "EnumData": []
        }
    ]
}