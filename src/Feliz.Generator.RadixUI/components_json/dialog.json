{
    "Name": "Dialog",
    "Description": "A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.",
    "ImportCommand": "@radix-ui/react-dialog",
    "SubComponentData": [
        {
            "Name": "Root",
            "Description": "Contains all the parts of a dialog.",
            "PropData": [
                {
                    "Name": "defaultOpen",
                    "Required": false,
                    "Description": "The open state of the dialog when it is initially rendered. Use when you do not need to control its open state.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "open",
                    "Required": false,
                    "Description": "The controlled open state of the dialog. Must be used in conjunction with onOpenChange.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "onOpenChange",
                    "Required": false,
                    "Description": "Event handler called when the open state of the dialog changes.",
                    "PropType": "function",
                    "PropTypeValue": "(open: boolean) => void"
                },
                {
                    "Name": "modal",
                    "Required": false,
                    "Description": "Event handler called when the open state of the dialog changes.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                }
            ],
            "EnumData": []
        },
        {
            "Name": "Trigger",
            "Description": "The button that opens the dialog.",
            "PropData": [
                {
                    "Name": "asChild",
                    "Required": false,
                    "Description": "Change the default rendered element for the one passed as a child, merging their props and behavior.  Read our Composition guide for more details.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                }
            ],
            "EnumData": []
        },
        {
            "Name": "Portal",
            "Description": "When used, portals your overlay and content parts into the body.",
            "PropData": [
                {
                    "Name": "forceMount",
                    "Required": false,
                    "Description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. If used on this part, it will be inherited by Dialog.Overlay and Dialog.Content.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "container",
                    "Required": false,
                    "Description": "Specify a container element to portal the content into.",
                    "PropType": "HTMLElement",
                    "PropTypeValue": "HTMLElement"
                }
            ],
            "EnumData": []
        },
        {
            "Name": "Overlay",
            "Description": "A layer that covers the inert portion of the view when the dialog is open.",
            "PropData": [
                {
                    "Name": "asChild",
                    "Required": false,
                    "Description": "Change the default rendered element for the one passed as a child, merging their props and behavior.  Read our Composition guide for more details.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "forceMount",
                    "Required": false,
                    "Description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. It inherits from Dialog.Portal.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                }
            ],
            "EnumData": []
        },
        {
            "Name": "Content",
            "Description": "Contains content to be rendered in the open dialog.",
            "PropData": [
                {
                    "Name": "asChild",
                    "Required": false,
                    "Description": "Change the default rendered element for the one passed as a child, merging their props and behavior.  Read our Composition guide for more details.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "forceMount",
                    "Required": false,
                    "Description": "Used to force mounting when more control is needed. Useful when controlling animation with React animation libraries. It inherits from Dialog.Portal.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                },
                {
                    "Name": "onOpenAutoFocus",
                    "Required": false,
                    "Description": "Event handler called when focus moves into the component after opening. It can be prevented by calling event.preventDefault.",
                    "PropType": "function",
                    "PropTypeValue": "(event: Event) => void"
                },
                {
                    "Name": "onCloseAutoFocus",
                    "Required": false,
                    "Description": "Event handler called when focus moves into the component after opening. It can be prevented by calling event.preventDefault.",
                    "PropType": "function",
                    "PropTypeValue": "(event: Event) => void"
                },
                {
                    "Name": "onEscapeKeyDown",
                    "Required": false,
                    "Description": "Event handler called when focus moves to the trigger after closing. It can be prevented by calling event.preventDefault.",
                    "PropType": "function",
                    "PropTypeValue": "(event: KeyboardEvent) => void"
                },
                {
                    "Name": "onPointerDownOutside",
                    "Required": false,
                    "Description": "Event handler called when the escape key is down. It can be prevented by calling event.preventDefault.",
                    "PropType": "function",
                    "PropTypeValue": "(event: PointerDownOutsideEvent) => void"
                },
                {
                    "Name": "onInteractOutside",
                    "Required": false,
                    "Description": "Event handler called when a pointer event occurs outside the bounds of the component. It can be prevented by calling event.preventDefault.",
                    "PropType": "function",
                    "PropTypeValue": "(event: React.FocusEvent | MouseEvent | TouchEvent) => void"
                }
            ],
            "EnumData": []
        },
        {
            "Name": "Close",
            "Description": "The button that closes the dialog.",
            "PropData": [
                {
                    "Name": "asChild",
                    "Required": false,
                    "Description": "Event handler called when an interaction (pointer or focus event) happens outside the bounds of the component. It can be prevented by calling event.preventDefault.",
                    "PropType": "boolean",
                    "PropTypeValue": "boolean"
                }
            ],
            "EnumData": []
        }
    ]
}